package frm;

import Classes.Enrollment;
import Classes.Student;
import Classes.Subject;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.mongodb.client.model.Filters;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.Document;

public class frame extends javax.swing.JFrame {

    /**
     * Creates new form frame
     */
    private String selectedId;
    private String selectedName;
    private String selectedCrs;
    private String selectedYl;
    
    public frame() {
        initComponents();
        String sid = "";
        String sname = "";
        String crs = "";
        String yl = "";
        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB(database);
        
        MongoDatabase database1 = Subject.connectToDatabase();
        List<Subject> subjects = Subject.getAllSubjectsFromDB(database1);
        // Add names to the combo box
        stuList.removeAllItems();
        for (Student student : students) {
            stuList.addItem(student.getStudentName()); 
        }
        for (Student student : students) {
            stuName.addItem(student.getStudentName()); 
        }
        
        for (Subject subject : subjects) {
            subCode.addItem(subject.getSubjectCode());
        }
        
        
        // Add names to the combo box
        DefaultTableModel model = (DefaultTableModel) stuTBL.getModel();
        for(Student student : students){
            sid = student.getStudentID();
            sname = student.getStudentName();
            crs = student.getCourse();
            yl = student.getYearlevel();
            model.addRow(new Object[]{sid, sname, crs, yl});
        }
        DefaultTableModel model2 = (DefaultTableModel) subTBL.getModel();
        for(Subject sub : subjects){
            String scode = sub.getSubjectCode();
            String des = sub.getDescription();
            int units = sub.getUnits();
            model2.addRow(new Object[]{scode, des, units});
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        GradePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        stuList = new javax.swing.JComboBox<>();
        GWA = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        EncodePanel = new javax.swing.JPanel();
        subCode = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        grade = new javax.swing.JComboBox<>();
        subDes = new javax.swing.JTextField();
        stuID2 = new javax.swing.JTextField();
        stuName = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        StudentPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        sname = new javax.swing.JTextField();
        sid = new javax.swing.JTextField();
        ylCB = new javax.swing.JComboBox<>();
        crsCB = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        stuTBL = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        codeAdd = new javax.swing.JTextField();
        desAdd = new javax.swing.JTextField();
        unitsAdd = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        subTBL = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CODE NI GRECIA");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GradePanel.setBackground(new java.awt.Color(102, 102, 255));
        GradePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "Description", "Units", "Grades"
            }
        ));
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        GradePanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 184, 560, 310));

        stuList.setEditable(true);
        stuList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        stuList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stuListActionPerformed(evt);
            }
        });
        GradePanel.add(stuList, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 110, 390, 30));

        GWA.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        GWA.setText("0.000");
        GradePanel.add(GWA, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 510, -1, 28));

        jLabel15.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel15.setText("STUDENT NAME");
        GradePanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, 28));

        jLabel16.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel16.setText("GWA: ");
        GradePanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 510, -1, 28));

        jTabbedPane5.addTab("Grades", GradePanel);

        EncodePanel.setBackground(new java.awt.Color(204, 255, 204));
        EncodePanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        subCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subCodeActionPerformed(evt);
            }
        });
        EncodePanel.add(subCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 170, 235, -1));

        jLabel2.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel2.setText("Grade");
        EncodePanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 160, 20));

        jLabel3.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel3.setText("Student ID");
        EncodePanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 130, 20));

        jLabel4.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel4.setText("Student Name");
        EncodePanel.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 130, 20));

        jLabel5.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel5.setText("Subject Code");
        EncodePanel.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 170, 130, 20));

        jLabel6.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel6.setText("Subject Description");
        EncodePanel.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 160, 20));

        grade.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1.0", "1.25", "1.5", "1.75", "2.0", "2.25", "2.50", "2.75", "3.00", "5.00" }));
        grade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeActionPerformed(evt);
            }
        });
        EncodePanel.add(grade, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 200, 235, -1));

        subDes.setEditable(false);
        EncodePanel.add(subDes, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 140, 240, -1));

        stuID2.setEditable(false);
        EncodePanel.add(stuID2, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 50, 240, -1));

        stuName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stuNameActionPerformed(evt);
            }
        });
        EncodePanel.add(stuName, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 80, 235, -1));

        jButton3.setText("SAVE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        EncodePanel.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 250, 110, 40));

        jTabbedPane5.addTab("Encode Grades", EncodePanel);

        StudentPanel.setBackground(new java.awt.Color(255, 204, 204));
        StudentPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel8.setText("Year Level");
        StudentPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 160, 140, 20));

        jLabel9.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel9.setText("Student ID");
        StudentPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 100, 20));

        jLabel10.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel10.setText("Student Name");
        StudentPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 140, 20));

        jLabel11.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel11.setText("Course");
        StudentPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 140, 20));

        sname.setEditable(false);
        StudentPanel.add(sname, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 60, 220, 30));

        sid.setEditable(false);
        sid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sidActionPerformed(evt);
            }
        });
        StudentPanel.add(sid, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 220, 30));

        ylCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1st Year", "2nd Year", "3rd Year", "4th Year", "5th Year" }));
        StudentPanel.add(ylCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 120, 30));

        crsCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BSCE", "BSCS", "BSIT", "BSPSY" }));
        crsCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crsCBActionPerformed(evt);
            }
        });
        StudentPanel.add(crsCB, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 120, 30));

        jButton1.setText("REFRESH");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        StudentPanel.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 70, 150, 30));

        jButton2.setText("ADD");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        StudentPanel.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 30, 150, 30));

        stuTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student ID", "Student Name", "Course", "Year Level"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stuTBL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                stuTBLMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                stuTBLMousePressed(evt);
            }
        });
        stuTBL.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                stuTBLKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(stuTBL);
        if (stuTBL.getColumnModel().getColumnCount() > 0) {
            stuTBL.getColumnModel().getColumn(1).setResizable(false);
        }

        StudentPanel.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 190, 580, 350));

        jButton5.setText("DELETE");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        StudentPanel.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 150, 150, 30));

        jButton6.setText("UPDATE");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        StudentPanel.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 110, 150, 30));

        jButton8.setText("FILTER");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        StudentPanel.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 150, 90, 30));

        jButton9.setText("FILTER");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        StudentPanel.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 110, 90, 30));

        jTabbedPane5.addTab("Student", StudentPanel);

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel1.setText("Subject Units");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 230, 30));

        jLabel12.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel12.setText("Subject Code");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 50, 230, 30));

        jLabel13.setFont(new java.awt.Font("Sitka Display", 1, 18)); // NOI18N
        jLabel13.setText("Subject Description");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 230, 30));

        jButton4.setText("DELETE");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 180, 120, 30));
        jPanel2.add(codeAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 50, 260, 30));
        jPanel2.add(desAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 90, 260, 30));

        unitsAdd.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 ", "2", "3", "4", "5", "6" }));
        jPanel2.add(unitsAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 130, 260, 30));

        subTBL.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Subject Code", "Description", "Units"
            }
        ));
        subTBL.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                subTBLMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(subTBL);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 460, 320));

        jButton7.setText("ADD");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 120, 30));

        jTabbedPane5.addTab("Subject", jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 600));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void stuTBLKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_stuTBLKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_stuTBLKeyPressed

    private void stuTBLMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stuTBLMousePressed
        // TODO add your handling code here:
        sname.setEditable(true);
        stuTBL.getSelectionModel().addListSelectionListener(event -> {
            int selectedRow = stuTBL.getSelectedRow();
            if (selectedRow != -1) { // Ensure a row is selected
                Object idValue = stuTBL.getValueAt(selectedRow, 0);// Adjust index if "Name" is in a different column
                Object nameValue = stuTBL.getValueAt(selectedRow, 1);
                Object crsValue = stuTBL.getValueAt(selectedRow, 2);
                Object ylValue = stuTBL.getValueAt(selectedRow, 3);
                selectedId = idValue.toString();
                selectedName = nameValue.toString();
                selectedCrs = crsValue.toString();
                selectedYl = ylValue.toString();
                sid.setText(selectedId); // Set the name in the sid text field
                sname.setText(selectedName);
                crsCB.setSelectedItem(selectedCrs);
                ylCB.setSelectedItem(selectedYl);
            }
        });
    }//GEN-LAST:event_stuTBLMousePressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        sid.setEditable(true);
        sname.setEditable(true);
        if(jButton2.getText().equals("ADD")){
            jButton2.setText("SAVE");
            sid.setText("");
            sname.setText("");
            sid.requestFocusInWindow();
        } else if(jButton2.getText().equals("SAVE")){

            MongoDatabase database = Student.connectToDatabase();
            List<Student> students = Student.getAllStudentsFromDB(database);

            String id = sid.getText();
            String name = sname.getText();
            String crs = (String) crsCB.getSelectedItem();
            String yl = (String) ylCB.getSelectedItem();
            for(Student student : students){
                if(id.equals(student.getStudentID())){
                    JOptionPane.showMessageDialog(null, "Student with this Student ID already exist");
                    sid.setText("");
                    sname.setText("");
                    sid.requestFocus();
                    return;
                } else if(name.equals(student.getStudentName())) {
                    JOptionPane.showMessageDialog(null, "Student with this Student Name already exist");
                    sid.setText("");
                    sname.setText("");
                    sid.requestFocus();
                    return;
                }
            }
            if (id.isEmpty() || name.isEmpty() ) {
                JOptionPane.showMessageDialog(null, "Please Enter a Valid Student ID and Student Name.");
                sid.requestFocus();
                return;
            }
            
            Student.addStudent(id, name, crs, yl, database);

            stuList.addItem(name);
            JOptionPane.showMessageDialog(null, "STUDENT SAVE SUCCESFULLY PO");
            sid.setText("");
            sname.setText("");
            sid.setEditable(false);
            sname.setEditable(false);
            jButton2.setText("ADD");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        DefaultTableModel model = (DefaultTableModel) stuTBL.getModel();
        model.setRowCount(0);
        
        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB(database);
        String sid = "";
        String sname = "";
        String crs = "";
        String yl = "";

        for(Student student : students){
            sid = student.getStudentID();
            sname = student.getStudentName();
            crs = student.getCourse();
            yl = student.getYearlevel();
            model.addRow(new Object[]{sid, sname, crs, yl});
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void sidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sidActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sidActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        boolean mikha = true;
        MongoDatabase database2 = Enrollment.connectToDatabase();
        List<Enrollment> enrollments = Enrollment.getAllEnrollmentFromDB(database2);
        List<Enrollment> roll = new ArrayList<>();
        
        try {
            // Retrieve the grade, student ID, and subject code
            String nm = (String) stuName.getSelectedItem();
            Double x = Double.valueOf((String) grade.getSelectedItem());
            String y = stuID2.getText();
            String z = (String) subCode.getSelectedItem();

            for (Enrollment enro : enrollments) {
                    if (y.equals(enro.getStudentID()) && z.equals(enro.getSubjectCode())) {
                        Enrollment.updGrade(x, y, z);
                        JOptionPane.showMessageDialog(this, "Grade updated successfully.");
                        mikha = false;
                    }
            }
            if(mikha){
                roll.add(new Enrollment(y,z,x));
                Enrollment.insertEnrollments(roll);
                JOptionPane.showMessageDialog(this, nm + " is Enrolled to " + z + " successfully");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid grade format. Please select a valid grade.");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "An error occurred: " + e.getMessage());
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void stuNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stuNameActionPerformed
        // TODO add your handling code here:
        String nm = (String) stuName.getSelectedItem();
        String id = "";

        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB(database);

        for (Student student : students) {
            if (nm.equals(student.getStudentName())) {
                stuID2.setText(student.getStudentID());
                id = student.getStudentID();
                break;
            }
        }
    }//GEN-LAST:event_stuNameActionPerformed

    private void gradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeActionPerformed

    private void subCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subCodeActionPerformed
        // TODO add your handling code here:
        String cc = (String) subCode.getSelectedItem();
        MongoDatabase database1 = Subject.connectToDatabase();
        List<Subject> subjects = Subject.getAllSubjectsFromDB(database1);

        for(Subject subject : subjects){
            if(cc.equals(subject.getSubjectCode())){
                subDes.setText(subject.getDescription());
            }
        }

    }//GEN-LAST:event_subCodeActionPerformed

    private void stuListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stuListActionPerformed
        // TODO add your handling code here:\
        double ttlgrades = 0;
        double ttlunits = 0;
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        model.setRowCount(0);

        String name = (String) stuList.getSelectedItem();

        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB(database);

        MongoDatabase database1 = Subject.connectToDatabase();
        List<Subject> subjects = Subject.getAllSubjectsFromDB(database1);

        MongoDatabase database2 = Enrollment.connectToDatabase();
        List<Enrollment> enrollments = Enrollment.getAllEnrollmentFromDB(database2);

        String id = "";
        String scode = "";
        String des = "";
        double units = 0;
        double grades = 0;
        for (Student student : students) {
            if(name.equals(student.getStudentName())){
                id = student.getStudentID();
                break;
            }
        }
        for (Enrollment enrollment : enrollments) {
            if(id.equals(enrollment.getStudentID())){
                scode = enrollment.getSubjectCode();
                grades = enrollment.getGrade();
                
                for (Subject subject : subjects){
                    if(scode.equals(subject.getSubjectCode())){
                        des = subject.getDescription();
                        units = subject.getUnits();
                        ttlgrades += grades * units;
                        ttlunits += units;
                    }
                }
                model.addRow(new Object[]{scode, des, units, grades});
            }
        }
        GWA.setText(String.format("%.2f", ttlgrades / ttlunits));

    }//GEN-LAST:event_stuListActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB(database);
        
        String id = sid.getText();
        String name = sname.getText();
        
        for (Student student : students) {
            if (id.equals(student.getStudentID()) && name.equals(student.getStudentName())) {
                // Delete the student from the MongoDB collection
                MongoCollection<Document> collection = database.getCollection("Student");
                collection.deleteOne(Filters.and(
                    Filters.eq("StudentID", id),
                    Filters.eq("StudentName", name)
                ));

                // Display a confirmation message
                JOptionPane.showMessageDialog(this, 
                    "Deleted Student: " + name + " (" + id + ")", 
                    "Deletion Successful", 
                    JOptionPane.INFORMATION_MESSAGE);
                return; // Exit loop as the student is found and deleted
            }
        }
        
        JOptionPane.showMessageDialog(this, 
                "Student " + name + " (" + id + ") is not found", 
                "Error Found", 
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        sid.setEditable(true);
        sname.setEditable(true);
        
        String oid = selectedId;
        String oname = selectedName;
        String ocrs = selectedCrs;
        String oyl = selectedYl;
        
        String id = sid.getText();
        String name = sname.getText();
        String crs = (String) crsCB.getSelectedItem();
        String yl = (String) ylCB.getSelectedItem();
        
        sid.setText("");
        sname.setText("");
        sid.requestFocus();
        
        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB(database);
        
        MongoDatabase database2 = Enrollment.connectToDatabase();
        List<Enrollment> enrollments = Enrollment.getAllEnrollmentFromDB(database2);
        
        //check kung may enrolled sila
        /*for(Enrollment roll : enrollments){
            if(oid.equals(roll.getStudentID())){
                JOptionPane.showMessageDialog(this, 
                "Student " + oname + " is Enrolled, Can not Edit ID", 
                "Student is Enrolled", 
                JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        */
        //
        for (Student student : students) {
            if (oid.equals(student.getStudentID()) && oname.equals(student.getStudentName())) {
                // Delete the student from the MongoDB collection
                MongoCollection<Document> collection = database.getCollection("Student");
                collection.deleteOne(Filters.and(
                    Filters.eq("StudentID", oid),
                    Filters.eq("StudentName", oname)
                ));
            }
        }
        Student.addStudent(id, name, crs, yl, database);
        JOptionPane.showMessageDialog(this, 
                "Student " + oname + " has been updated to " + name, 
                "Student is Updated", 
                JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        String cc = (String) crsCB.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) stuTBL.getModel();
        model.setRowCount(0);
        
        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB2(database);
        String sid = "";
        String sname = "";
        String crs = "";
        String yl = "";

        for(Student student : students){
            if(cc.equals(student.getCourse())){
                sid = student.getStudentID();
                sname = student.getStudentName();
                crs = student.getCourse();
                yl = student.getYearlevel();
                model.addRow(new Object[]{sid, sname, crs, yl});
            }
        }
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        String cc = (String) ylCB.getSelectedItem();
        DefaultTableModel model = (DefaultTableModel) stuTBL.getModel();
        model.setRowCount(0);
        
        MongoDatabase database = Student.connectToDatabase();
        List<Student> students = Student.getAllStudentsFromDB3(database);
        String sid = "";
        String sname = "";
        String crs = "";
        String yl = "";

        for(Student student : students){
            if(cc.equals(student.getYearlevel())){
                sid = student.getStudentID();
                sname = student.getStudentName();
                crs = student.getCourse();
                yl = student.getYearlevel();
                model.addRow(new Object[]{sid, sname, crs, yl});
            }
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblMouseClicked

    private void tblMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblMousePressed

    private void crsCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crsCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_crsCBActionPerformed

    private void stuTBLMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stuTBLMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_stuTBLMouseEntered

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        if(jButton7.getText().equals("ADD")){
            jButton7.setText("SAVE");
            codeAdd.setText("");
            desAdd.setText("");
            codeAdd.requestFocusInWindow();
        } else if(jButton7.getText().equals("SAVE")){
            MongoDatabase database1 = Subject.connectToDatabase();
            List<Subject> subjects = Subject.getAllSubjectsFromDB(database1);

            String code = codeAdd.getText();
            String desc = desAdd.getText();
            int un = unitsAdd.getSelectedIndex() + 1;

            for(Subject sub : subjects){
                if(code.isEmpty() || desc.isEmpty()){
                    JOptionPane.showMessageDialog(this, 
                    "Code and Description is Invalid", 
                    "Error", 
                    JOptionPane.INFORMATION_MESSAGE);
                    return;
                } else if (code.equals(sub.getSubjectCode())){
                    JOptionPane.showMessageDialog(this, 
                    "Subject with this Code already exist", 
                    "Error", 
                    JOptionPane.INFORMATION_MESSAGE);
                    codeAdd.setText("");
                    desAdd.setText("");
                    return;
                } else if (desc.equals(sub.getDescription())){
                    JOptionPane.showMessageDialog(this, 
                    "Subject with this Description already exist", 
                    "Error", 
                    JOptionPane.INFORMATION_MESSAGE);
                    codeAdd.setText("");
                    desAdd.setText("");
                    return;
            }
        }
        
        Subject.addSubject(code, desc, un,  database1);
        
        DefaultTableModel mo = (DefaultTableModel) subTBL.getModel();
        mo.setRowCount(0);
        database1 = Subject.connectToDatabase();
        subjects = Subject.getAllSubjectsFromDB(database1);
        for(Subject sub : subjects){
            String scode = sub.getSubjectCode();
            String des = sub.getDescription();
            int units = sub.getUnits();
            mo.addRow(new Object[]{scode, des, units});
        }
        codeAdd.setText("");
        desAdd.setText("");
        jButton7.setText("ADD");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        String code = codeAdd.getText();
        String desc = desAdd.getText();
        int un = unitsAdd.getSelectedIndex() + 1;
        
        MongoDatabase database1 = Subject.connectToDatabase();
        MongoCollection<Document> coll = database1.getCollection("Subject");
        List<Subject> subjects = Subject.getAllSubjectsFromDB(database1);
        
        for(Subject sub : subjects){
            if(code.equals(sub.getSubjectCode()) && desc.equals(sub.getDescription())){
                coll.deleteOne(Filters.and(
                    Filters.eq("SubjectCode", code),
                    Filters.eq("Description", desc)
                ));
                codeAdd.setText("");
                desAdd.setText("");
                DefaultTableModel mo = (DefaultTableModel) subTBL.getModel();
            mo.setRowCount(0);

            database1 = Subject.connectToDatabase();
            subjects = Subject.getAllSubjectsFromDB(database1);
            for(Subject sub2 : subjects){
                String scode = sub2.getSubjectCode();
                String des = sub2.getDescription();
                int units = sub2.getUnits();
                mo.addRow(new Object[]{scode, des, units});
            }
                JOptionPane.showMessageDialog(this, 
                    "Deleted Subject: " + desc + " (" + code + ")", 
                    "Deletion Successful", 
                    JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        
        JOptionPane.showMessageDialog(this, 
                    " Subject: " + desc + " (" + code + ") is not found", 
                    "Deletion Unsuccessful", 
                    JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void subTBLMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subTBLMousePressed
        // TODO add your handling code here:
        subTBL.getSelectionModel().addListSelectionListener(event -> {
            int selectedRow = subTBL.getSelectedRow();
            if (selectedRow != -1) { // Ensure a row is selected
                Object sub = subTBL.getValueAt(selectedRow, 0);// Adjust index if "Name" is in a different column
                Object des = subTBL.getValueAt(selectedRow, 1);
                Object units = subTBL.getValueAt(selectedRow, 2);
                codeAdd.setText((String) sub); // Set the name in the sid text field
                desAdd.setText((String) des);
                unitsAdd.setSelectedItem(units);
            }
        });
    }//GEN-LAST:event_subTBLMousePressed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EncodePanel;
    private javax.swing.JLabel GWA;
    private javax.swing.JPanel GradePanel;
    private javax.swing.JPanel StudentPanel;
    private javax.swing.JTextField codeAdd;
    private javax.swing.JComboBox<String> crsCB;
    private javax.swing.JTextField desAdd;
    private javax.swing.JComboBox<String> grade;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTextField sid;
    private javax.swing.JTextField sname;
    private javax.swing.JTextField stuID2;
    private javax.swing.JComboBox<String> stuList;
    private javax.swing.JComboBox<String> stuName;
    private javax.swing.JTable stuTBL;
    private javax.swing.JComboBox<String> subCode;
    private javax.swing.JTextField subDes;
    private javax.swing.JTable subTBL;
    private javax.swing.JTable tbl;
    private javax.swing.JComboBox<String> unitsAdd;
    private javax.swing.JComboBox<String> ylCB;
    // End of variables declaration//GEN-END:variables
}
